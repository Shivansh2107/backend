// server.js
const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// Secret key for signing JWTs
const SECRET_KEY = 'supersecretkey';

// Simulated user and account data
let user = {
  username: 'john',
  password: '12345',
  balance: 1000
};

// ----------------------------
// 1️⃣ Login Route - Generate JWT
// ----------------------------
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  if (username === user.username && password === user.password) {
    const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: '1h' });
    res.json({ message: 'Login successful', token });
  } else {
    res.status(401).json({ message: 'Invalid credentials' });
  }
});

// ----------------------------
// 2️⃣ JWT Verification Middleware
// ----------------------------
const verifyToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];

  if (!authHeader) {
    return res.status(401).json({ message: 'Authorization header missing' });
  }

  const token = authHeader.split(' ')[1];

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) {
      return res.status(403).json({ message: 'Invalid or expired token' });
    }
    req.user = decoded; // store decoded user data
    next();
  });
};

// ----------------------------
// 3️⃣ Protected Routes
// ----------------------------

// 💰 Get Balance
app.get('/balance', verifyToken, (req, res) => {
  res.json({ balance: user.balance });
});

// 💵 Deposit
app.post('/deposit', verifyToken, (req, res) => {
  const { amount } = req.body;
  if (amount <= 0) {
    return res.status(400).json({ message: 'Deposit amount must be positive' });
  }

  user.balance += amount;
  res.json({ message: 'Deposit successful', newBalance: user.balance });
});

// 💸 Withdraw
app.post('/withdraw', verifyToken, (req, res) => {
  const { amount } = req.body;

  if (amount <= 0) {
    return res.status(400).json({ message: 'Withdrawal amount must be positive' });
  }

  if (amount > user.balance) {
    return res.status(400).json({ message: 'Insufficient balance' });
  }

  user.balance -= amount;
  res.json({ message: 'Withdrawal successful', newBalance: user.balance });
});

// ----------------------------
// Start Server
// ----------------------------
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`✅ Server running on http://localhost:${PORT}`);
});
